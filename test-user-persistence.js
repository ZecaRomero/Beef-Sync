// TESTE DE PERSIST√äNCIA DE USU√ÅRIOS - Execute no console
console.log('üíæ TESTANDO PERSIST√äNCIA DE USU√ÅRIOS');
console.log('====================================');

// Fun√ß√£o para verificar usu√°rios salvos
function verificarUsuariosSalvos() {
    console.log('üîç Verificando usu√°rios no localStorage...');
    
    const savedUsers = localStorage.getItem('beef_sync_users');
    if (savedUsers) {
        const users = JSON.parse(savedUsers);
        console.log('‚úÖ Usu√°rios encontrados:', users.length);
        users.forEach((user, index) => {
            console.log(`${index + 1}. ${user.nome} (${user.role}) - ID: ${user.id}`);
        });
        return users;
    } else {
        console.log('‚ùå Nenhum usu√°rio salvo encontrado');
        return [];
    }
}

// Fun√ß√£o para adicionar usu√°rio de teste
function adicionarUsuarioTeste() {
    console.log('‚ûï Adicionando usu√°rio de teste...');
    
    const users = verificarUsuariosSalvos();
    const novoUsuario = {
        id: Math.max(...users.map(u => u.id), 0) + 1,
        nome: 'Jo√£o Silva',
        role: 'Consultor',
        permissoes: ['read']
    };
    
    const updatedUsers = [...users, novoUsuario];
    localStorage.setItem('beef_sync_users', JSON.stringify(updatedUsers));
    
    console.log('‚úÖ Usu√°rio adicionado:', novoUsuario);
    console.log('üíæ Dados salvos no localStorage');
    
    return updatedUsers;
}

// Fun√ß√£o para limpar usu√°rios
function limparUsuarios() {
    console.log('üßπ Limpando usu√°rios...');
    localStorage.removeItem('beef_sync_users');
    console.log('‚úÖ Usu√°rios removidos do localStorage');
}

// Fun√ß√£o para restaurar usu√°rios padr√£o
function restaurarUsuariosPadrao() {
    console.log('üîÑ Restaurando usu√°rios padr√£o...');
    
    const usuariosPadrao = [
        { id: 1, nome: 'Zeca', role: 'Desenvolvedor', permissoes: ['all'] }
    ];
    
    localStorage.setItem('beef_sync_users', JSON.stringify(usuariosPadrao));
    console.log('‚úÖ Usu√°rios padr√£o restaurados');
    
    return usuariosPadrao;
}

// Disponibilizar fun√ß√µes globalmente
window.verificarUsuariosSalvos = verificarUsuariosSalvos;
window.adicionarUsuarioTeste = adicionarUsuarioTeste;
window.limparUsuarios = limparUsuarios;
window.restaurarUsuariosPadrao = restaurarUsuariosPadrao;

console.log('‚úÖ FUN√á√ïES DISPON√çVEIS:');
console.log('- verificarUsuariosSalvos() - Ver usu√°rios salvos');
console.log('- adicionarUsuarioTeste() - Adicionar usu√°rio de teste');
console.log('- limparUsuarios() - Limpar todos os usu√°rios');
console.log('- restaurarUsuariosPadrao() - Restaurar usu√°rios padr√£o');
console.log('');
console.log('üß™ TESTE COMPLETO:');
console.log('1. Execute: verificarUsuariosSalvos()');
console.log('2. Execute: adicionarUsuarioTeste()');
console.log('3. Pressione F5 para recarregar');
console.log('4. Execute: verificarUsuariosSalvos() novamente');
console.log('5. O usu√°rio deve persistir ap√≥s F5');
console.log('====================================');

// Verifica√ß√£o inicial
verificarUsuariosSalvos();