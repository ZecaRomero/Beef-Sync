// TESTE DE ACESSO DE CONSULTORES - Execute no console
console.log('üë®‚Äçüíº TESTANDO ACESSO DE CONSULTORES');
console.log('==================================');

// Fun√ß√£o para simular login de consultor
function loginComoConsultor(nome) {
    console.log(`üîë Fazendo login como ${nome} (consultor)...`);
    
    // Limpar dados antigos
    localStorage.removeItem('beef-sync-user');
    localStorage.removeItem('beef_sync_user_name');
    localStorage.removeItem('beef_sync_user_role');
    
    // Configurar consultor
    const consultorUser = {
        username: nome.toLowerCase(),
        name: nome,
        role: 'consultant',
        permissions: ['read']
    };
    
    localStorage.setItem('beef-sync-user', JSON.stringify(consultorUser));
    localStorage.setItem('beef_sync_user_name', nome);
    localStorage.setItem('beef_sync_user_role', 'Consultor');
    
    console.log('‚úÖ Login realizado como:', nome);
    console.log('üîë Fun√ß√£o: Consultor');
    console.log('üìã Permiss√µes: Apenas leitura');
    
    return consultorUser;
}

// Fun√ß√£o para verificar o que o consultor pode acessar
function verificarAcessoConsultor() {
    console.log('üîç Verificando acesso do consultor...');
    
    const user = JSON.parse(localStorage.getItem('beef-sync-user') || '{}');
    
    if (user.role !== 'consultant') {
        console.log('‚ùå Usu√°rio n√£o √© consultor');
        return;
    }
    
    console.log('üë§ Usu√°rio:', user.name);
    console.log('');
    console.log('‚úÖ DEVE TER ACESSO A:');
    console.log('- üìä Relat√≥rios BI (gr√°ficos e an√°lises)');
    console.log('- üìÖ Timeline de Vendas (acompanhar vendas)');
    console.log('- üìã Relat√≥rios Gerais (consultar relat√≥rios)');
    console.log('');
    console.log('‚ùå N√ÉO DEVE TER ACESSO A:');
    console.log('- üêÑ Cadastro de Animais');
    console.log('- üìã Criar Nota Fiscal');
    console.log('- ‚öôÔ∏è Configura√ß√µes do Sistema');
    console.log('- üë• Gerenciamento de Usu√°rios');
    console.log('');
    console.log('‚ö†Ô∏è TELA DEVE MOSTRAR:');
    console.log('- Aviso de "Acesso Limitado"');
    console.log('- Apenas 3 bot√µes principais');
    console.log('- Informa√ß√µes sobre permiss√µes');
}

// Disponibilizar fun√ß√µes globalmente
window.loginComoConsultor = loginComoConsultor;
window.verificarAcessoConsultor = verificarAcessoConsultor;

// Fun√ß√£o para testar todos os consultores
function testarTodosConsultores() {
    console.log('üß™ TESTANDO TODOS OS CONSULTORES:');
    console.log('');
    
    const consultores = ['Bento', 'Mauricio', 'Nilson', 'Jorge'];
    
    consultores.forEach((nome, index) => {
        console.log(`${index + 1}. Para testar ${nome}: loginComoConsultor("${nome}")`);
    });
    
    console.log('');
    console.log('üìã AP√ìS CADA LOGIN:');
    console.log('1. Execute: verificarAcessoConsultor()');
    console.log('2. Recarregue a p√°gina: window.location.reload()');
    console.log('3. Verifique se n√£o aparece bot√£o de "Cadastro de Animais"');
}

window.testarTodosConsultores = testarTodosConsultores;

console.log('‚úÖ FUN√á√ïES DISPON√çVEIS:');
console.log('- loginComoConsultor("Nome") - Login como consultor');
console.log('- verificarAcessoConsultor() - Verificar permiss√µes');
console.log('- testarTodosConsultores() - Ver todos os testes');
console.log('');
console.log('üß™ TESTE R√ÅPIDO PARA BENTO:');
console.log('1. Execute: loginComoConsultor("Bento")');
console.log('2. Execute: window.location.reload()');
console.log('3. Verifique se N√ÉO aparece "Cadastro de Animais"');
console.log('==================================');

// Mostrar instru√ß√µes para todos os consultores
testarTodosConsultores();