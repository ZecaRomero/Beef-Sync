(()=>{var e={};e.id=1950,e.ids=[1950],e.modules={145:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6664:(e,m,n)=>{"use strict";n.r(m),n.d(m,{config:()=>s,default:()=>o,routeModule:()=>r});var x=n(1802),b=n(7153),a=n(8781),t=n(898);let o=(0,a.l)(t,"default"),s=(0,a.l)(t,"config"),r=new x.PagesAPIRouteModule({definition:{kind:b.x.PAGES_API,page:"/api/semen-movements",pathname:"/api/semen-movements",bundlePath:"",filename:""},userland:t})},898:()=>{throw Error("Module build failed (from ./node_modules/next/dist/build/webpack/loaders/next-swc-loader.js):\nError: \n  \x1b[38;2;255;30;30m\xd7\x1b[0m cannot reassign to a variable declared with `const`\n     ╭─[\x1b[38;2;92;157;255;1;4mC:\\Users\\zeca8\\OneDrive\\Documentos\\Sistemas\\Beef-Sync\\Beef-Sync\\pages\\api\\semen-movements.js\x1b[0m:66:1]\n \x1b[2m 66\x1b[0m │         destinatario,\n \x1b[2m 67\x1b[0m │         valorUnitario,\n \x1b[2m 68\x1b[0m │         observacoes,\n \x1b[2m 69\x1b[0m │         semenStockId,\n     \xb7 \x1b[38;2;246;87;248m        ──────┬─────\x1b[0m\n     \xb7               \x1b[38;2;246;87;248m╰── \x1b[38;2;246;87;248mconst variable was declared here\x1b[0m\x1b[0m\n \x1b[2m 70\x1b[0m │         containerOrigemId,\n \x1b[2m 71\x1b[0m │         containerDestinoId\n \x1b[2m 72\x1b[0m │       } = req.body;\n \x1b[2m 73\x1b[0m │ \n \x1b[2m 74\x1b[0m │       // Valida\xe7\xf5es b\xe1sicas\n \x1b[2m 75\x1b[0m │       if (!tipo || !responsavel || !quantidade) {\n \x1b[2m 76\x1b[0m │         return res.status(400).json({ \n \x1b[2m 77\x1b[0m │           error: 'Campos obrigat\xf3rios: tipo, responsavel, quantidade' \n \x1b[2m 78\x1b[0m │         });\n \x1b[2m 79\x1b[0m │       }\n \x1b[2m 80\x1b[0m │ \n \x1b[2m 81\x1b[0m │       // Para sa\xeddas, buscar o estoque pelo touro e localiza\xe7\xe3o se n\xe3o tiver semenStockId\n \x1b[2m 82\x1b[0m │       if (tipo === 'SAIDA') {\n \x1b[2m 83\x1b[0m │         let stockId = semenStockId;\n \x1b[2m 84\x1b[0m │         \n \x1b[2m 85\x1b[0m │         // Se n\xe3o tem semenStockId, buscar pelo nome do touro e RG\n \x1b[2m 86\x1b[0m │         if (!stockId && req.body.nomeTouro && req.body.rg) {\n \x1b[2m 87\x1b[0m │           const stock = await prisma.semenStock.findFirst({\n \x1b[2m 88\x1b[0m │             where: {\n \x1b[2m 89\x1b[0m │               nomeTouro: req.body.nomeTouro,\n \x1b[2m 90\x1b[0m │               rg: req.body.rg,\n \x1b[2m 91\x1b[0m │               quantidadeDisponivel: {\n \x1b[2m 92\x1b[0m │                 gt: 0\n \x1b[2m 93\x1b[0m │               }\n \x1b[2m 94\x1b[0m │             }\n \x1b[2m 95\x1b[0m │           });\n \x1b[2m 96\x1b[0m │           stockId = stock?.id;\n \x1b[2m 97\x1b[0m │         }\n \x1b[2m 98\x1b[0m │ \n \x1b[2m 99\x1b[0m │         if (stockId) {\n \x1b[2m100\x1b[0m │           const semenStock = await prisma.semenStock.findUnique({\n \x1b[2m101\x1b[0m │             where: { id: stockId }\n \x1b[2m102\x1b[0m │           });\n \x1b[2m103\x1b[0m │ \n \x1b[2m104\x1b[0m │           if (!semenStock) {\n \x1b[2m105\x1b[0m │             return res.status(404).json({ error: 'Estoque de s\xeamen n\xe3o encontrado' });\n \x1b[2m106\x1b[0m │           }\n \x1b[2m107\x1b[0m │ \n \x1b[2m108\x1b[0m │           if (semenStock.quantidadeDisponivel < parseInt(quantidade)) {\n \x1b[2m109\x1b[0m │             return res.status(400).json({ error: 'Quantidade insuficiente em estoque' });\n \x1b[2m110\x1b[0m │           }\n \x1b[2m111\x1b[0m │ \n \x1b[2m112\x1b[0m │           // Atualizar estoque\n \x1b[2m113\x1b[0m │           await prisma.semenStock.update({\n \x1b[2m114\x1b[0m │             where: { id: stockId },\n \x1b[2m115\x1b[0m │             data: {\n \x1b[2m116\x1b[0m │               quantidadeDisponivel: {\n \x1b[2m117\x1b[0m │                 decrement: parseInt(quantidade)\n \x1b[2m118\x1b[0m │               },\n \x1b[2m119\x1b[0m │               quantidadeUsada: {\n \x1b[2m120\x1b[0m │                 increment: parseInt(quantidade)\n \x1b[2m121\x1b[0m │               },\n \x1b[2m122\x1b[0m │               status: semenStock.quantidadeDisponivel - parseInt(quantidade) === 0 ? 'USADO' : semenStock.status\n \x1b[2m123\x1b[0m │             }\n \x1b[2m124\x1b[0m │           });\n \x1b[2m125\x1b[0m │ \n \x1b[2m126\x1b[0m │           // Atualizar ocupa\xe7\xe3o da caneca\n \x1b[2m127\x1b[0m │           const caneca = await prisma.semenCaneca.findUnique({\n \x1b[2m128\x1b[0m │             where: { id: semenStock.canecaId }\n \x1b[2m129\x1b[0m │           });\n \x1b[2m130\x1b[0m │ \n \x1b[2m131\x1b[0m │           if (caneca) {\n \x1b[2m132\x1b[0m │             await prisma.semenCaneca.update({\n \x1b[2m133\x1b[0m │               where: { id: caneca.id },\n \x1b[2m134\x1b[0m │               data: {\n \x1b[2m135\x1b[0m │                 ocupacao: {\n \x1b[2m136\x1b[0m │                   decrement: parseInt(quantidade)\n \x1b[2m137\x1b[0m │                 }\n \x1b[2m138\x1b[0m │               }\n \x1b[2m139\x1b[0m │             });\n \x1b[2m140\x1b[0m │           }\n \x1b[2m141\x1b[0m │ \n \x1b[2m142\x1b[0m │           // Usar o stockId encontrado para a movimenta\xe7\xe3o\n \x1b[2m143\x1b[0m │           semenStockId = stockId;\n     \xb7 \x1b[38;2;30;201;212m          ──────┬─────\x1b[0m\n     \xb7                 \x1b[38;2;30;201;212m╰── \x1b[38;2;30;201;212mcannot reassign\x1b[0m\x1b[0m\n \x1b[2m144\x1b[0m │         }\n \x1b[2m145\x1b[0m │       }\n \x1b[2m145\x1b[0m │ \r\n     ╰────\n")}};var m=require("../../webpack-api-runtime.js");m.C(e);var __webpack_exec__=e=>m(m.s=e),n=m.X(0,[4222],()=>__webpack_exec__(6664));module.exports=n})();