"use strict";exports.id=6949,exports.ids=[6949],exports.modules={6949:(e,t,a)=>{a.d(t,{Z:()=>r});let AnimalDataManager=class AnimalDataManager{constructor(){this.baseURL="/api",this.token=null,this.listeners=[]}setToken(e){this.token=e}getHeaders(){let e={"Content-Type":"application/json"};return this.token&&(e.Authorization=`Bearer ${this.token}`),e}async handleResponse(e){if(!e.ok){let t=await e.json();throw Error(t.message||"Erro na requisi\xe7\xe3o")}return e.json()}addListener(e){this.listeners.push(e)}removeListener(e){this.listeners=this.listeners.filter(t=>t!==e)}notifyListeners(e){this.listeners.forEach(t=>t(e))}async login(e,t){let a=await fetch(`${this.baseURL}/auth/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e,password:t})}),s=await this.handleResponse(a);return this.setToken(s.token),s}async register(e,t,a){let s=await fetch(`${this.baseURL}/auth/register`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e,password:t,name:a})});return this.handleResponse(s)}loadToken(){return null}saveToken(e){}logout(){this.token=null}async getAllAnimals(){try{let e=await fetch(`${this.baseURL}/animals`,{headers:this.getHeaders()}),t=await this.handleResponse(e);return this.notifyListeners(t),t}catch(t){console.error("Erro ao buscar animais:",t);let e=[];return this.notifyListeners(e),e}}async getAnimalById(e){try{let t=await fetch(`${this.baseURL}/animals/${e}`,{headers:this.getHeaders()});return this.handleResponse(t)}catch(e){return console.error("Erro ao buscar animal:",e),null}}async addAnimal(e){let t=await fetch(`${this.baseURL}/animals`,{method:"POST",headers:this.getHeaders(),body:JSON.stringify(e)});return this.handleResponse(t)}async updateAnimal(e,t){try{let a=await fetch(`${this.baseURL}/animals/${e}`,{method:"PUT",headers:this.getHeaders(),body:JSON.stringify(t)});return this.handleResponse(a)}catch(e){throw console.error("Erro ao atualizar animal:",e),e}}async deleteAnimal(e){try{let t=await fetch(`${this.baseURL}/animals/${e}`,{method:"DELETE",headers:this.getHeaders()});return this.handleResponse(t)}catch(e){throw console.error("Erro ao excluir animal:",e),e}}async getAllGestations(){return[]}async addGestation(e){let t=await fetch(`${this.baseURL}/gestations`,{method:"POST",headers:this.getHeaders(),body:JSON.stringify(e)});return this.handleResponse(t)}async updateGestation(e,t){let a=await fetch(`${this.baseURL}/gestations/${e}`,{method:"PUT",headers:this.getHeaders(),body:JSON.stringify(t)});return this.handleResponse(a)}async getCosts(e={}){let t=new URLSearchParams(e),a=await fetch(`${this.baseURL}/costs?${t}`,{headers:this.getHeaders()});return this.handleResponse(a)}async addCost(e){let t=await fetch(`${this.baseURL}/costs`,{method:"POST",headers:this.getHeaders(),body:JSON.stringify(e)});return this.handleResponse(t)}async addCustoToAnimal(e,t){let a={...t,animalId:e,data:t.data||new Date().toISOString()};return this.addCost(a)}async addWeight(e){let t=await fetch(`${this.baseURL}/weights`,{method:"POST",headers:this.getHeaders(),body:JSON.stringify(e)});return this.handleResponse(t)}async getAlerts(e=null){let t=e?`?status=${e}`:"",a=await fetch(`${this.baseURL}/alerts${t}`,{headers:this.getHeaders()});return this.handleResponse(a)}async addAlert(e){let t=await fetch(`${this.baseURL}/alerts`,{method:"POST",headers:this.getHeaders(),body:JSON.stringify(e)});return this.handleResponse(t)}async updateAlert(e,t){let a=await fetch(`${this.baseURL}/alerts/${e}`,{method:"PUT",headers:this.getHeaders(),body:JSON.stringify(t)});return this.handleResponse(a)}async getDashboardStats(){return{totalAnimals:0,totalGestations:0,pendingAlerts:0,monthlyCosts:0,animalsByCategory:[],costsByType:[],upcomingBirths:[]}}async getStatistics(){try{return await this.getDashboardStats()}catch(e){return console.error("Error getting statistics:",e),{totalAnimals:0,totalGestations:0,pendingAlerts:0,monthlyCosts:0,animalsByCategory:[],costsByType:[],upcomingBirths:[]}}}async registrarNascimento(e,t){try{let a={brinco:t.rg||t.tatuagem,nome:t.nome||null,raca:this.getRacaBySerie(t.serie),sexo:t.sexo,dataNasc:t.dataNascimento,peso:parseFloat(t.peso),categoria:"Bezerro",observacoes:`FIV - Pai: ${e.paiSerie} ${e.paiRg}, M\xe3e: ${e.maeSerie} ${e.maeRg}, Receptora: ${e.receptoraNome}`},s=await this.addAnimal(a),r=.3*e.custoAcumulado,i=[{tipo:"NASCIMENTO",descricao:`Nascimento ${t.tipoNascimento} - Peso: ${t.peso}kg`,valor:t.custoNascimento,data:t.dataNascimento,animalId:s.id,observacoes:t.observacoes},{tipo:"EXAME",descricao:"DNA - Paternidade + Gen\xf4mica",valor:t.custoDNA,data:t.dataNascimento,animalId:s.id,observacoes:"FIV - Confirma\xe7\xe3o paternidade e an\xe1lise gen\xf4mica"},{tipo:"RECEPTORA",descricao:`Rateio receptora ${e.receptoraNome}`,valor:r,data:t.dataNascimento,animalId:s.id,observacoes:`30% do custo total da receptora (R$ ${e.custoAcumulado.toFixed(2)})`}];for(let e of i)await this.addCost(e);return s}catch(e){throw console.error("Error registering birth:",e),e}}async registrarVenda(e,t,a,s){try{return await this.updateAnimal(e,{status:"VENDIDO"}),await this.addCost({tipo:"VENDA",descricao:"Venda do animal",valor:-t,data:a,animalId:e,observacoes:s||`Venda por R$ ${t.toFixed(2)}`}),{success:!0}}catch(e){throw console.error("Error registering sale:",e),e}}searchAnimals(e,t){let a=t.toLowerCase();return e.filter(e=>e.brinco.toLowerCase().includes(a)||e.nome&&e.nome.toLowerCase().includes(a)||e.raca&&e.raca.toLowerCase().includes(a))}getAnimalsByCategory(e,t){return e.filter(e=>e.categoria===t)}getRacaBySerie(e){return({CJCJ:"Nelore",BENT:"Brahman",CJCG:"Gir",RPT:"Receptora"})[e]||"Nelore"}calcularIdadeEmMeses(e){if(!e)return 0;let t=new Date,a=new Date(e);return Math.floor(Math.floor((t-a)/864e5)/30)}async exportarDados(){try{let[e,t]=await Promise.all([this.getAllAnimals(),this.getStatistics()]);return{animals:e,statistics:t,exportDate:new Date().toISOString()}}catch(e){throw console.error("Error exporting data:",e),e}}};let s=new AnimalDataManager,r=s}};