// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  animals         Animal[]
  costs           Cost[]
  alerts          Alert[]
  saleEvents      SaleEvent[]
  sales           Sale[]
  semenContainers SemenContainer[]
  semenStock      SemenStock[]
  semenMovements  SemenMovement[]

  @@map("users")
}

model Animal {
  id          String    @id @default(cuid())
  brinco      String    @unique
  serie       String?
  nome        String?
  raca        String?
  sexo        String
  dataNasc    DateTime?
  peso        Float?
  categoria   String?
  status      String    @default("ATIVO")
  observacoes String?

  // Campos de venda
  valorVenda  Float?
  dataVenda   DateTime?
  tipoVenda   String?   // VENDA_DIRETA, LEILAO, VENDA_ABATE, VENDA_DESCARTE, OUTRO
  era         String?   // Idade em meses ou era do animal

  // Campos genealógicos
  pai         String?   // Nome do touro (pai)
  mae         String?   // Nome da mãe
  avoMaterno  String?   // Nome do avô materno
  receptora   String?   // Nome da receptora (para FIV)
  tipoCobertura String? // FIV, IA, MONTA_NATURAL

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Foreign Keys
  userId      String

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  gestations  Gestation[]
  costs       Cost[]
  weights     Weight[]
  sales       Sale[]
  invoices    InvoiceAnimal[]

  @@map("animals")
}

model Gestation {
  id              String    @id @default(cuid())
  dataCobertura   DateTime
  dataPrevParto   DateTime
  dataRealParto   DateTime?
  touroId         String?
  status          String    @default("GESTANTE")
  observacoes     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Foreign Keys
  animalId        String

  // Relations
  animal          Animal    @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@map("gestations")
}

model Weight {
  id        String   @id @default(cuid())
  peso      Float
  data      DateTime
  createdAt DateTime @default(now())

  // Foreign Keys
  animalId  String

  // Relations
  animal    Animal   @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@map("weights")
}

model Cost {
  id          String   @id @default(cuid())
  tipo        String   // ALIMENTACAO, VETERINARIO, MEDICAMENTO, VENDA, etc
  descricao   String
  valor       Float
  data        DateTime
  categoria   String?
  observacoes String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign Keys
  userId      String
  animalId    String?

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  animal      Animal?  @relation(fields: [animalId], references: [id], onDelete: SetNull)

  @@map("costs")
}

model Alert {
  id          String   @id @default(cuid())
  tipo        String   // VACINA, PARTO, PESO, etc
  titulo      String
  descricao   String
  data        DateTime
  status      String   @default("PENDENTE")
  prioridade  String   @default("MEDIA")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign Keys
  userId      String

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alerts")
}

model MarketPrice {
  id        String   @id @default(cuid())
  produto   String   // BOI_GORDO, BEZERRO, etc
  preco     Float
  unidade   String   // KG, CABECA
  mercado   String   // LOCAL, NACIONAL
  data      DateTime
  fonte     String?
  createdAt DateTime @default(now())

  @@map("market_prices")
}

model SaleEvent {
  id          String   @id @default(cuid())
  nome        String
  tipo        String   // LEILAO, VENDA_DIRETA, VENDA_ABATE, VENDA_DESCARTE, FEIRA, etc
  data        DateTime
  local       String?
  descricao   String?
  comissao    Float?   // Percentual de comissão
  taxas       Float?   // Taxas fixas do evento
  observacoes String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign Keys
  userId      String

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sales       Sale[]

  @@map("sale_events")
}

model Sale {
  id            String    @id @default(cuid())
  valor         Float
  dataVenda     DateTime
  comprador     String?
  documento     String?   // CPF/CNPJ do comprador
  telefone      String?
  endereco      String?
  formaPagamento String?  // DINHEIRO, PIX, BOLETO, etc
  observacoes   String?
  comissao      Float?    // Valor da comissão
  taxas         Float?    // Taxas da venda
  valorLiquido  Float?    // Valor após descontos
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Foreign Keys
  animalId      String
  userId        String
  saleEventId   String?

  // Relations
  animal        Animal    @relation(fields: [animalId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  saleEvent     SaleEvent? @relation(fields: [saleEventId], references: [id], onDelete: SetNull)

  @@map("sales")
}

model Invoice {
  id                String    @id @default(cuid())
  numero            String    @unique
  tipoVenda         String    @default("VENDA_DIRETA") // VENDA_DIRETA, LEILAO, VENDA_ABATE, VENDA_DESCARTE, OUTRO
  compradorNome     String
  compradorCpfCnpj  String?
  compradorEndereco String?
  compradorCidade   String?
  compradorEstado   String?
  compradorCep      String?
  valorTotal        Float
  dataVenda         DateTime
  observacoes       String?
  status            String    @default("PENDENTE") // PENDENTE, EMITIDA, PAGA, CANCELADA
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  animals           InvoiceAnimal[]

  @@map("invoices")
}

model InvoiceAnimal {
  id        String  @id @default(cuid())
  preco     Float
  createdAt DateTime @default(now())

  // Foreign Keys
  invoiceId String
  animalId  String

  // Relations
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  animal    Animal  @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@unique([invoiceId, animalId])
  @@map("invoice_animals")
}

model GTA {
  id            String    @id @default(cuid())
  numero        String?
  origem        String?
  destino       String?
  dataEmissao   DateTime?
  finalidade    String?
  transportador String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("gtas")
}

// Modelos para Sistema de Sêmen

model SemenContainer {
  id                String    @id @default(cuid())
  botijaoNumero     String    @unique
  marca             String?
  modelo            String?
  capacidade        Int       // Capacidade total em doses
  dataAquisicao     DateTime?
  status            String    @default("ATIVO") // ATIVO, MANUTENCAO, INATIVO
  temperatura       Float?    // Temperatura atual
  nivelNitrogeno    Float?    // Nível de nitrogênio em %
  proximaManutencao DateTime?
  observacoes       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Foreign Keys
  userId            String

  // Relations
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  canecas           SemenCaneca[]
  semenStock        SemenStock[]
  movementsOrigem   SemenMovement[]   @relation("MovementOrigem")
  movementsDestino  SemenMovement[]   @relation("MovementDestino")

  @@map("semen_containers")
}

model SemenCaneca {
  id                String    @id @default(cuid())
  numero            String    // A1, B2, C3, etc
  capacidade        Int       // Capacidade em doses
  ocupacao          Int       @default(0) // Doses atualmente armazenadas
  posicoes          String?   // Ex: "1-10", "11-20"
  observacoes       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Foreign Keys
  containerId       String

  // Relations
  container         SemenContainer @relation(fields: [containerId], references: [id], onDelete: Cascade)
  semenStock        SemenStock[]

  @@unique([containerId, numero])
  @@map("semen_canecas")
}

model SemenStock {
  id                    String    @id @default(cuid())
  nomeTouro             String
  rg                    String
  raca                  String
  fornecedor            String
  notaFiscal            String?
  quantidadeTotal       Int       // Quantidade inicial
  quantidadeDisponivel  Int       // Quantidade atual disponível
  quantidadeUsada       Int       @default(0) // Quantidade já utilizada
  valorUnitario         Float?    // Valor por dose
  dataEntrada           DateTime  @default(now())
  dataColeta            DateTime? // Data da coleta do sêmen
  dataVencimento        DateTime? // Data de vencimento
  posicao               String?   // Posição específica na caneca
  status                String    @default("DISPONIVEL") // DISPONIVEL, RESERVADO, USADO, VENCIDO
  responsavel           String?   // Responsável pela entrada
  observacoes           String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Foreign Keys
  userId                String
  containerId           String
  canecaId              String

  // Relations
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  container             SemenContainer    @relation(fields: [containerId], references: [id], onDelete: Cascade)
  caneca                SemenCaneca       @relation(fields: [canecaId], references: [id], onDelete: Cascade)
  movements             SemenMovement[]

  @@map("semen_stock")
}

model SemenMovement {
  id                    String    @id @default(cuid())
  tipo                  String    // ENTRADA, SAIDA, TRANSFERENCIA
  data                  DateTime  @default(now())
  responsavel           String
  quantidade            Int
  motivo                String?   // inseminacao, venda, descarte, transferencia, vencimento
  destinatario          String?   // Animal ou pessoa que recebeu
  valorUnitario         Float?    // Valor por dose (para vendas)
  observacoes           String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Foreign Keys
  userId                String
  semenStockId          String?   // Para movimentos de estoque específico
  containerOrigemId     String?   // Botijão de origem
  containerDestinoId    String?   // Botijão de destino

  // Relations
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  semenStock            SemenStock?       @relation(fields: [semenStockId], references: [id], onDelete: SetNull)
  containerOrigem       SemenContainer?   @relation("MovementOrigem", fields: [containerOrigemId], references: [id], onDelete: SetNull)
  containerDestino      SemenContainer?   @relation("MovementDestino", fields: [containerDestinoId], references: [id], onDelete: SetNull)

  @@map("semen_movements")
}
