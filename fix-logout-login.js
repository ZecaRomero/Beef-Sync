// Script completo: Logout + Login + Acesso aos Usu√°rios
console.log("üîÑ CORRE√á√ÉO COMPLETA - Logout e Login");
console.log("=====================================");

// Fun√ß√£o para fazer logout completo
function doLogout() {
  console.log("üö™ Fazendo logout...");

  // Limpar todos os dados de autentica√ß√£o
  localStorage.removeItem("beef-sync-user");
  localStorage.removeItem("beef_sync_user_name");
  localStorage.removeItem("beef_sync_user_role");
  localStorage.removeItem("beef_sync_user");

  // Limpar outros dados que possam interferir
  sessionStorage.clear();

  console.log("‚úÖ Logout realizado com sucesso");
}

// Fun√ß√£o para fazer login como Zeca
function doLogin() {
  console.log("üîë Fazendo login como Zeca...");

  // Configurar dados do usu√°rio Zeca
  const ZecaUser = {
    username: "Zeca",
    name: "Zeca",
    role: "developer",
    permissions: ["read", "write", "delete", "admin", "manage_users"],
  };

  // Salvar dados de autentica√ß√£o
  localStorage.setItem("beef-sync-user", JSON.stringify(ZecaUser));
  localStorage.setItem("beef_sync_user_name", "Zeca");
  localStorage.setItem("beef_sync_user_role", "Desenvolvedor");

  console.log("‚úÖ Login realizado como:", ZecaUser.name);
  console.log("üîê Permiss√µes:", ZecaUser.permissions.join(", "));
}

// Fun√ß√£o para verificar se pode acessar usu√°rios
function checkUserAccess() {
  console.log("üîç Verificando acesso aos usu√°rios...");

  const user = JSON.parse(localStorage.getItem("beef-sync-user") || "{}");

  if (!user.username) {
    console.log("‚ùå Usu√°rio n√£o encontrado");
    return false;
  }

  const hasPermission =
    user.permissions && user.permissions.includes("manage_users");
  console.log("üë§ Usu√°rio:", user.name);
  console.log(
    "üîê Pode gerenciar usu√°rios:",
    hasPermission ? "‚úÖ SIM" : "‚ùå N√ÉO"
  );

  return hasPermission;
}

// Fun√ß√£o para navegar para usu√°rios
function goToUsers() {
  console.log("üöÄ Navegando para p√°gina de usu√°rios...");

  // Tentar diferentes formas de navega√ß√£o
  try {
    // Op√ß√£o 1: URL direta
    window.location.href = "/users";
  } catch (error) {
    console.log("‚ùå Erro na navega√ß√£o:", error);

    // Op√ß√£o 2: Reload e depois navegar
    setTimeout(() => {
      window.location.href = "/users";
    }, 1000);
  }
}

// Executar sequ√™ncia completa
async function executeFullFix() {
  console.log("üöÄ Iniciando corre√ß√£o completa...");

  // Passo 1: Logout
  doLogout();

  // Aguardar um pouco
  await new Promise((resolve) => setTimeout(resolve, 500));

  // Passo 2: Login
  doLogin();

  // Aguardar um pouco
  await new Promise((resolve) => setTimeout(resolve, 500));

  // Passo 3: Verificar acesso
  const canAccess = checkUserAccess();

  if (canAccess) {
    console.log("‚úÖ CORRE√á√ÉO CONCLU√çDA COM SUCESSO!");
    console.log("üîó Redirecionando para p√°gina de usu√°rios...");

    // Aguardar um pouco e navegar
    setTimeout(() => {
      goToUsers();
    }, 1000);
  } else {
    console.log("‚ùå ERRO: Ainda n√£o foi poss√≠vel configurar o acesso");
  }
}

// Executar a corre√ß√£o
executeFullFix();

console.log("=====================================");
console.log("üìã INSTRU√á√ïES:");
console.log("1. Este script far√° logout e login automaticamente");
console.log("2. Aguarde o redirecionamento para /users");
console.log("3. Se n√£o funcionar, recarregue a p√°gina e tente novamente");
console.log("4. Ou navegue manualmente para: /users");
console.log("=====================================");
