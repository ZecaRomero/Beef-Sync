// CORRE√á√ÉO DO DARK MODE - Execute no console
console.log('üåô CORRIGINDO PERSIST√äNCIA DO DARK MODE');
console.log('======================================');

// Fun√ß√£o para for√ßar dark mode
function forcarDarkMode() {
    console.log('üîß For√ßando dark mode...');
    
    // Salvar no localStorage
    localStorage.setItem('theme', 'dark');
    
    // Aplicar classe CSS imediatamente
    document.documentElement.classList.add('dark');
    document.documentElement.style.colorScheme = 'dark';
    
    // Tamb√©m salvar em outras chaves que possam ser usadas
    localStorage.setItem('beef_sync_theme', 'dark');
    localStorage.setItem('darkMode', 'true');
    
    console.log('‚úÖ Dark mode aplicado');
}

// Fun√ß√£o para verificar estado do tema
function verificarTema() {
    console.log('üîç Verificando estado do tema...');
    
    const theme = localStorage.getItem('theme');
    const beefSyncTheme = localStorage.getItem('beef_sync_theme');
    const darkMode = localStorage.getItem('darkMode');
    const hasClass = document.documentElement.classList.contains('dark');
    
    console.log('theme:', theme);
    console.log('beef_sync_theme:', beefSyncTheme);
    console.log('darkMode:', darkMode);
    console.log('Classe CSS aplicada:', hasClass);
    
    return {
        theme,
        beefSyncTheme,
        darkMode,
        hasClass
    };
}

// Fun√ß√£o para criar listener persistente
function criarListenerPersistente() {
    console.log('üëÇ Criando listener para manter dark mode...');
    
    // Listener para mudan√ßas no DOM
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                const savedTheme = localStorage.getItem('theme');
                if (savedTheme === 'dark' && !document.documentElement.classList.contains('dark')) {
                    console.log('üîÑ Reaplican dark mode...');
                    document.documentElement.classList.add('dark');
                }
            }
        });
    });
    
    observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ['class']
    });
    
    // Listener para storage
    window.addEventListener('storage', (e) => {
        if (e.key === 'theme' && e.newValue === 'dark') {
            document.documentElement.classList.add('dark');
        }
    });
    
    console.log('‚úÖ Listeners criados');
}

// Fun√ß√£o para aplicar corre√ß√£o completa
function aplicarCorrecaoCompleta() {
    console.log('üöÄ Aplicando corre√ß√£o completa...');
    
    // 1. For√ßar dark mode
    forcarDarkMode();
    
    // 2. Criar listeners
    criarListenerPersistente();
    
    // 3. Verificar periodicamente
    setInterval(() => {
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme === 'dark' && !document.documentElement.classList.contains('dark')) {
            console.log('üîÑ Corrigindo tema automaticamente...');
            document.documentElement.classList.add('dark');
        }
    }, 1000);
    
    console.log('‚úÖ Corre√ß√£o completa aplicada');
}

// Disponibilizar fun√ß√µes globalmente
window.forcarDarkMode = forcarDarkMode;
window.verificarTema = verificarTema;
window.aplicarCorrecaoCompleta = aplicarCorrecaoCompleta;

console.log('‚úÖ FUN√á√ïES DISPON√çVEIS:');
console.log('- forcarDarkMode() - For√ßa dark mode');
console.log('- verificarTema() - Verifica estado atual');
console.log('- aplicarCorrecaoCompleta() - Aplica corre√ß√£o completa');
console.log('');
console.log('üß™ TESTE:');
console.log('1. Execute: aplicarCorrecaoCompleta()');
console.log('2. Fa√ßa alguma altera√ß√£o que cause reload');
console.log('3. O dark mode deve permanecer ativo');
console.log('======================================');

// Aplicar corre√ß√£o automaticamente
aplicarCorrecaoCompleta();

// Verificar estado inicial
verificarTema();